version: 2
jobs:
  build:
    working_directory: ~/gwx-registry-api
    docker:
      - image: circleci/ruby:2.5.7-stretch
        environment:
          BUNDLER_VERSION: 2.0.1
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
      - image: circleci/postgres:9.6.10-alpine
        environtment:
          POSTGRES_USER: postgres
          POSTGRES_DB: gwx_registry_api_test
    steps:
      - checkout
      - type: cache-restore
        name: Restore bundle cache
        key: gwx-registry-api-{{ checksum "Gemfile.lock" }}
      - run:
          name: Get bundler version
          command: |
            BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")
            gem install bundler --version=$BUNDLER_VERSION
      - run:
          name: Install Ruby Dependencies
          command: bundle install --path vendor/bundle
      - type: cache-save
        name: Store bundle cache
        key: gwx-registry-api-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle
      - run:
          name: install libsodium
          command: |
            sudo apt-get install libsodium-dev
      - run:
          name: Create DB
          command: bundle exec rake db:create db:schema:load
      - run:
          name: Run RSpec
          command: |
            bundle exec rspec spec

  deploy:
    working_directory: ~/gwx-registry-api
    docker:
      - image: circleci/ruby:2.5.1-stretch
        environment:
          BUNDLER_VERSION: 2.0.1
    steps:
      - checkout
      - type: cache-restore
        name: Restore bundle cache
        key: gwx-registry-api-{{ checksum "Gemfile.lock" }}
      - run:
          name: Get bundler version
          command: |
            BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")
            gem install bundler --version=$BUNDLER_VERSION
      - run:
          name: Bundle
          command: bundle check || bundle install
      - run:
          name: Deploy
          command: |
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              bundle exec cap staging deploy
            fi
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              bundle exec cap production deploy
            fi

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - master
